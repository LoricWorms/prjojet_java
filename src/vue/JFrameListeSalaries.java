package vue;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import modele.dao.DaoCategorie;
import modele.dao.DaoSalarie;
import modele.dao.DaoService;
import modele.metier.Categorie;
import modele.metier.Salarie;
import modele.metier.Service;

/**
 * GUI liste des salariés par service
 * @author btssio
 */
public class JFrameListeSalaries extends javax.swing.JFrame {


    // les modèles 
    private DefaultTableModel modeleJTableLesSalaries;
    private DefaultComboBoxModel modeleJComboLesServices;

    /**
     * Creates new form JFrameListeSalariess
     */
    public JFrameListeSalaries() {
        initComponents();
        this.setLocation(150, 150);

        // Définition du nouveau modèle de JComboBox
        modeleJComboLesServices = new DefaultComboBoxModel();
        jComboBoxLesServices.setModel(modeleJComboLesServices);

        // Définition du nouveau modèle de JTable :
        //      - rendre les cellules non éditables
        modeleJTableLesSalaries = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int iRowIndex, int iColumnIndex) {
                return false;
            }
        };
        //      - affecter le modèle au composant JTable       
        jTableSalaries.setModel(modeleJTableLesSalaries);
        //      - configurer les colonnes
        String[] titres = {"Code", "Nom", "Prenom", "Date naiss.", "Date emb.", "Fonction", "Service"};
        modeleJTableLesSalaries.setColumnIdentifiers(titres);
        //      - adapter la largeur des colonnes
        jTableSalaries.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTableSalaries.getColumnModel().getColumn(3).setPreferredWidth(90);
        jTableSalaries.getColumnModel().getColumn(4).setPreferredWidth(90);
        jTableSalaries.getColumnModel().getColumn(5).setPreferredWidth(150);
        jTableSalaries.getColumnModel().getColumn(6).setPreferredWidth(100);



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSalaries = new javax.swing.JTable();
        jComboBoxLesServices = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButtonQuitter = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonConsulter = new javax.swing.JButton();
        jButtonAjouter = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("InfoWare - SIRH");

        jLabel1.setText("Liste des salariés par service");

        jTableSalaries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableSalaries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSalariesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSalaries);

        jComboBoxLesServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLesServicesActionPerformed(evt);
            }
        });

        jLabel2.setText("Service :");

        jButtonQuitter.setText("Quitter");
        jButtonQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitterActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonConsulter.setText("Consulter");
        jButtonConsulter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsulterActionPerformed(evt);
            }
        });

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButtonConsulter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSupprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAjouter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonModifier)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxLesServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonQuitter)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(297, 297, 297))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxLesServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConsulter)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jButtonQuitter)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableSalariesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSalariesMouseClicked
        // Un salarié sélectionné ?
        if (jTableSalaries.getSelectedRow() > -1) {
            String codeSalarie = (String) jTableSalaries.getValueAt(jTableSalaries.getSelectedRow(), 0);
            // Lire le salarié sélectionné
            Salarie unSalarie = null;
            // Lire le salarié sélectionné dans la BDD
            try {
                unSalarie = DaoSalarie.getOneById(codeSalarie);
                System.out.println("Salarié sélectionné :\n" + unSalarie.toString());
            } catch (Exception ex) {
                System.out.println("JFrameListeSalaries - pb lecture salarie sélectionné : " + ex.getMessage());
            }
        }

    }//GEN-LAST:event_jTableSalariesMouseClicked

    private void jButtonQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitterActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jButtonQuitterActionPerformed

    private void jComboBoxLesServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLesServicesActionPerformed
         // Récupérer le service sélectionné dans la liste déroulante
        Service serviceSelectionne = (Service) jComboBoxLesServices.getSelectedItem();
    
        // Si le service sélectionné n'est pas null et n'est pas "Tous services"
        if (serviceSelectionne != null && serviceSelectionne.getCode() != 0) {
            try {
                // Récupérer tous les salariés
                List<Salarie> tousLesSalaries = DaoSalarie.getAll();
            
                // Filtrer la liste pour ne garder que les salariés du service sélectionné
                List<Salarie> salariesFiltres = new ArrayList<>();
                for (Salarie salarie : tousLesSalaries) {
                    if (salarie.getService() != null && salarie.getService().getCode() == serviceSelectionne.getCode()) {
                        salariesFiltres.add(salarie);
                    }
                }
            
            // Mettre à jour la table des salariés avec la liste filtrée
            remplirJTableSalaries(salariesFiltres);
            } catch (Exception ex) {
                System.out.println("Erreur lors de la récupération des salariés par service : " + ex.getMessage());
            }
        } else {
            // Si "Tous services" est sélectionné, afficher tous les salariés
            try {
                List<Salarie> tousLesSalaries = DaoSalarie.getAll();
                remplirJTableSalaries(tousLesSalaries);
            } catch (Exception ex) {
                System.out.println("Erreur lors de la récupération de tous les salariés : " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jComboBoxLesServicesActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        // Vérifier si un salarié est sélectionné dans la table
        int selectedRow = jTableSalaries.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un salarié à supprimer.", "Aucun salarié sélectionné", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Demander confirmation avant de supprimer le salarié
       int option = JOptionPane.showConfirmDialog(this, "Êtes-vous sûr de vouloir supprimer ce salarié ?", "Confirmation de suppression", JOptionPane.YES_NO_OPTION);
       if (option == JOptionPane.YES_OPTION) {
            // Récupérer le code du salarié sélectionné dans la table
           String codeSalarie = (String) jTableSalaries.getValueAt(selectedRow, 0);

            try {
                // Supprimer le salarié et ses suivis de la base de données
                DaoSalarie.supprimerSalarieEtSuivre(codeSalarie);

                jTableSalaries.removeAll();
                remplirJTableSalaries(DaoSalarie.getAll());
                

                JOptionPane.showMessageDialog(this, "Le salarié a été supprimé avec succès.", "Suppression réussie", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors de la suppression du salarié : " + ex.getMessage(), "Erreur de suppression", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonConsulterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsulterActionPerformed
        // TODO add your handling code here:
        // Vérifier si un salarié est sélectionné dans la table
        if (jTableSalaries.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un salarié à consulter.", "Aucun salarié sélectionné", JOptionPane.WARNING_MESSAGE);
        return;
        }
        
        // Récupérer le code du salarié sélectionné
        String codeSalarie = (String) jTableSalaries.getValueAt(jTableSalaries.getSelectedRow(), 0);
        // Lire le salarié sélectionné depuis la base de données
        Salarie unSalarie = null;
        try {
            unSalarie = DaoSalarie.getOneById(codeSalarie);
            // Créer une instance de JFrameConsulter en passant le salarié sélectionné comme paramètre
            JDialogConsulter consulterDialog = new JDialogConsulter(unSalarie);
            // Afficher la fenêtre JFrameConsulter
            this.toBack();
            consulterDialog.setVisible(true);
            consulterDialog.toFront();
        } catch (Exception ex) {
            System.out.println("Erreur lors de la récupération du salarié: " + ex.getMessage());
        }
    
    }//GEN-LAST:event_jButtonConsulterActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        // TODO add your handling code here:
         // Récupérer le service sélectionné
        Service serviceSelectionne = getServiceSelectionne();

        try {
            // Récupérer toutes les catégories de la base de données
            ArrayList<Categorie> desCategories = DaoCategorie.getAll();

            // Créer et afficher la boîte de dialogue avec la liste des catégories
            this.toBack();
            JDialogAjouter ajouterDialog = new JDialogAjouter(this, true, serviceSelectionne, desCategories);
            ajouterDialog.setVisible(true);
            ajouterDialog.toFront();
        } catch (SQLException | IOException ex) {
            
        };
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        // TODO add your handling code here:
        // Vérifier si un salarié est sélectionné dans la table
        if (jTableSalaries.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un salarié à consulter.", "Aucun salarié sélectionné", JOptionPane.WARNING_MESSAGE);
        return;
        }
        
        // Récupérer le code du salarié sélectionné
        String codeSalarie = (String) jTableSalaries.getValueAt(jTableSalaries.getSelectedRow(), 0);
        // Lire le salarié sélectionné depuis la base de données
        Salarie unSalarie = null;
        try {
            ArrayList<Categorie> desCategories = DaoCategorie.getAll();
            ArrayList<Service> desServices = DaoService.getAll();
            unSalarie = DaoSalarie.getOneById(codeSalarie);
            // Créer une instance de JFrameConsulter en passant le salarié sélectionné comme paramètre
            JDialogModifier modifierDialog = new JDialogModifier(this, true, desServices, desCategories, unSalarie);
            // Afficher la fenêtre JFrameConsulter
            this.toBack();
            modifierDialog.setVisible(true);
            modifierDialog.toFront();
        } catch (Exception ex) {
            System.out.println("Erreur lors de la récupération du salarié: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    
    public Service getServiceSelectionne() {
        return (Service) jComboBoxLesServices.getSelectedItem();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameListeSalaries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JFrameListeSalaries().setVisible(true);
            }
        });
    }

    // SERVICES
    public void remplirJComBoxServices(List<Service> desServices) {
        modeleJComboLesServices.removeAllElements();
        // La première option permet de sélectionner tous les salariés
        modeleJComboLesServices.addElement(new Service(0, "*** Tous services ***"));
        // Options suivantes : une par service
        for (Service unService : desServices) {
            modeleJComboLesServices.addElement(unService);
        }
    }

    public void remplirJTableSalaries(List<Salarie> desSalaries) {
        modeleJTableLesSalaries.setRowCount(0);
        // Une ligne de la table est un tableau d'objets
        Object[] rowData = new Object[jTableSalaries.getColumnModel().getColumnCount()];
        for (Salarie unSalarie : desSalaries) {
            rowData[0] = unSalarie.getCode();
            rowData[1] = unSalarie.getNom();
            rowData[2] = unSalarie.getPrenom();
            rowData[3] = unSalarie.getDateNaiss();
            rowData[4] = unSalarie.getDateEmbauche();
            rowData[5] = unSalarie.getFonction();
            if (unSalarie.getService() != null){
                rowData[6] = unSalarie.getService().getDesignation();
            }else{
                rowData[6] = "";
            }
            
            modeleJTableLesSalaries.addRow(rowData);
        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonConsulter;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonQuitter;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JComboBox jComboBoxLesServices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSalaries;
    // End of variables declaration//GEN-END:variables
}
